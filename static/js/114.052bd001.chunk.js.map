{"version":3,"file":"static/js/114.052bd001.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/CreateContact/CreateContact.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","components/ContactListItem/ContactListItem.module.css","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.module.css","components/ContactList/ContactList.jsx","components/Filter/Filter.module.css","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useId } from \"react\";\nimport * as yup from 'yup';\n\nimport toast from 'react-hot-toast';\nimport PropTypes from 'prop-types';\n\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\nimport s from \"./ContactForm.module.css\";\n\nconst schema = yup.object().shape({\n  name: yup.string().required(\"enter a name, this is a required field\"),\n  number: yup.string().min(8).max(13).required(\"enter a phone number, this is a required field\"),\n});\n\n\nexport const ContactForm = ({ initialValues = {\n  name: '', number: '',}, onSubmit, buttonText }) => {\n      \n    const id = useId();\n  \n  const { data: contacts } = useGetContactsQuery();\n\n\n  const handleSubmit = async (values, { resetForm }) => {\n     if (contacts.find(contact => contact.name.toLocaleLowerCase() === values.name.toLocaleLowerCase())){\n       toast.error(`${values.name} is already in contacts`)\n        return\n     }\n    await onSubmit(values);\n    resetForm();\n  };\n\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}>\n      <Form className={s.form} autoComplete='off'>\n        <label htmlFor={`${id}-name`} className={s.label}>Name</label>\n        <Field\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          id={`${id}-name`}\n        />\n        <ErrorMessage className={s.error} name=\"name\" component=\"div\" />\n        <label htmlFor={`${id}-number`} className={s.label}>Number</label>\n        <Field\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          id={`${id}-number`}\n        />\n        <ErrorMessage className={s.error} name=\"number\" component=\"div\" />\n        <button className={s.button} type='submit'>{buttonText}</button>\n      </Form>\n    </Formik>\n  );\n  \n}\n\nContactForm.propTypes = {\n  initialValues: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  buttonText: PropTypes.string.isRequired,\n\n};","import toast from 'react-hot-toast';\n\nimport { useAddContactMutation } from 'redux/contacts/contactsSlice.js';\nimport { ContactForm } from \"components/ContactForm/ContactForm.jsx\";\n\n\nexport const CreateContact = () => {\n\n  const [addContact] = useAddContactMutation();\n    \n  const handleAddContact = async (values) => {\n    try {\n      await addContact(values);\n      toast.success(`contact \"${values.name}\" was saved`)\n    } catch (error) {\n      toast.error('error, contact was not saved')\n      console.log(error)\n    }\n  };\n    \n  return (\n    <>\n      <ContactForm onSubmit={handleAddContact} buttonText='Add contact' />\n    </>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Modal_Overlay__yoxbg\",\"Modal\":\"Modal_Modal__I1UYJ\",\"btnClose\":\"Modal_btnClose__oHdcJ\",\"button\":\"Modal_button__PTCbC\",\"icon\":\"Modal_icon__2UpwH\"};","import { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport toast from \"react-hot-toast\";\nimport { MdClose } from \"react-icons/md\";\n\nimport { useGetContactsQuery, useUpdateContactMutation } from \"redux/contacts/contactsSlice.js\";\nimport { ContactForm } from \"components/ContactForm/ContactForm.jsx\";\nimport s from \"./Modal.module.css\";\n\nexport const Modal = ({ onClose, id }) => {\n    \n    const { data: contacts } = useGetContactsQuery();\n    const [updateMaterial, result] = useUpdateContactMutation();\n\n    const contact = contacts.find(contact => contact.id === id);\n\n    \n    \n    \n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n    \n        return () => {\n            window.removeEventListener('keydown', handleKeyDown)\n        }\n    });\n\n    \n    const handleKeyDown = e => {\n        if (e.code === 'Escape') {\n            onClose();\n        }\n    };\n    \n\n    const handleBackdropClick = e => {\n        if (e.currentTarget === e.target) {\n            onClose();\n        }\n    };\n\n    const handleUpdateContact = async fields => {\n        try {\n            await updateMaterial({ id: contact.id, ...fields })\n            onClose();\n        }\n        catch (error) {\n            console.log(error)\n        }\n    };\n\n    useEffect(() => {\n        if (result.isSuccess) {\n            toast.success(`changes was saved`);\n        }\n        return\n      \n    }, [result.isSuccess]);\n\n\n    return createPortal(\n        <div className={s.Overlay}\n            onClick={handleBackdropClick}>\n            <div className={s.Modal}>\n                {contacts && (\n                    <button\n                        onClick={onClose}\n                        type=\"button\"\n                        className={s.btnClose}><MdClose className={s.icon} /></button>\n                )}\n                {contacts && (\n                    <ContactForm\n                        initialValues={{ name: contact.name, number: contact.number }}\n                        onSubmit={handleUpdateContact}\n                        buttonText='Save' />\n                )}\n            </div>\n        </div>,\n        document.querySelector('#modal-root'),\n    );\n}\n\n\nModal.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\n\nimport { useDeleteContactMutation } from 'redux/contacts/contactsSlice';\nimport { Modal } from 'components/Modal/Modal.jsx';\nimport s from \"./ContactListItem.module.css\";\n\nexport const ContactListItem = ({ id, name, number }) => {\n\n    const [deleteContact, result] = useDeleteContactMutation();\n    const [showModal, setShowModal] = useState(false);\n\n    const toggleModal = () => {\n        setShowModal(!showModal);\n    };\n    \n    const onDeleteContact = () => deleteContact(id);\n\n    useEffect(() => {\n        if (result.isSuccess) {\n            toast.success(`contact was deleted`);\n        }\n        return\n      \n    }, [result.isSuccess]);\n    \n\n    return (\n        <li className={s.item}>{name}: {number}\n            <div className={s.btnGroup}>\n                <button className={s.button} type=\"button\"\n                    onClick={onDeleteContact}\n                    disabled={result.isLoading}\n                >\n                    Delete\n                </button>\n                <button\n                    className={s.button}\n                    onClick={toggleModal}>Update</button>\n            </div>\n            {showModal &&\n                <Modal\n                    onClose={toggleModal}\n                    id={id}\n                />}\n        </li>\n    );\n}\n\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {};","import { useSelector } from 'react-redux';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\nimport s from './ContactList.module.css';\n\nexport const ContactList = () => {\n    const { data: contacts, isFetching } = useGetContactsQuery();\n   \n    \n    const filter = useSelector(state => state.filter);\n\n    \n    const filteredContacts = contacts?.filter(contact =>\n        contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()));\n    \n\n    return (\n        <>\n            {contacts ? isFetching : <p className={s.loading}>Loading...</p>}\n            <ul>\n                {contacts && filteredContacts.map(({ id, name, number }) => {\n                    return (\n                        <ContactListItem\n                            key={id}\n                            id={id}\n                            name={name}\n                            number={number}\n                        />\n                    )\n                })}\n            </ul>\n        </>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n// import { useSelector } from 'react-redux';\n// import { createSelector } from '@reduxjs/toolkit';\n// import { useMemo } from 'react';\n\n// import { ContactListItem } from 'components/ContactListItem/ContactListItem.jsx';\n// import { useGetContactsQuery } from 'redux/contacts/contactsSlice';\n\n// import s from './ContactList.module.css';\n\n// export const ContactList = () => {\n\n    \n//     const filter = useSelector(state => state.filter);\n\n//     const selectFilteredContacts = useMemo(() => {\n//         return createSelector(\n//             [response => response.data, (_, filter) => filter],\n//             (contacts, filter) => {\n//                 return (\n//                     contacts?.filter(contact =>\n//                         contact.name.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n//                     ) ?? []\n//                 );\n//             }\n//         );\n//     }, []);\n\n//     const { filteredContacts, isFetching } = useGetContactsQuery(\n//         undefined,\n//         {\n//             selectFromResult(result) {\n//                 return {\n//                     ...result,\n//                     filteredContacts: selectFilteredContacts(result, filter),\n//                 }\n//             }\n//         }\n//     );\n    \n\n//     return (\n//         <>\n//             {filteredContacts ? isFetching : <p className={s.loading}>Loading...</p>}\n//             <ul>\n//                 {filteredContacts && filteredContacts.map(({ id, name, number }) => {\n//                     return (\n//                         <ContactListItem\n//                             key={id}\n//                             id={id}\n//                             name={name}\n//                             number={number}\n//                         />\n//                     )\n//                 })}\n//             </ul>\n//         </>\n//     );\n// }","// extracted by mini-css-extract-plugin\nexport default {};","import { useId } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { changeFilter } from \"redux/contacts/filterSlice\";\nimport s from \"./Filter.module.css\";\n\n\nexport const Filter = () => {\n\nconst id = useId();\nconst filter = useSelector(state => state.filter);\nconst dispatch = useDispatch();\n\nconst onChangeFilter = (event) => dispatch(changeFilter(event.currentTarget.value));\n\n    return (\n        <div className={s.filter}>\n            <label htmlFor={`${id}-filter`} className={s.label}>Find contacts by name</label>\n            <input className={s.input} type=\"search\"\n                id={`${id}-filter`}\n                value={filter}\n                onChange={onChangeFilter}\n            />\n        </div>\n\n    );\n}\n\n","import { CreateContact } from \"components/CreateContact/CreateContact.jsx\";\nimport { ContactList } from \"components/ContactList/ContactList.jsx\";\nimport { Filter } from \"components/Filter/Filter.jsx\";\n\nexport default function ContactsPage() {\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <CreateContact />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </div>\n    );\n};"],"names":["schema","yup","shape","name","required","number","min","max","ContactForm","initialValues","onSubmit","buttonText","id","useId","contacts","useGetContactsQuery","data","handleSubmit","values","resetForm","find","contact","toLocaleLowerCase","toast","validationSchema","className","s","autoComplete","htmlFor","type","component","CreateContact","useAddContactMutation","addContact","handleAddContact","console","log","Modal","onClose","useUpdateContactMutation","updateMaterial","result","useEffect","window","addEventListener","handleKeyDown","removeEventListener","e","code","handleUpdateContact","fields","isSuccess","createPortal","onClick","currentTarget","target","document","querySelector","ContactListItem","useDeleteContactMutation","deleteContact","useState","showModal","setShowModal","toggleModal","disabled","isLoading","ContactList","isFetching","filter","useSelector","state","filteredContacts","includes","map","Filter","dispatch","useDispatch","value","onChange","event","changeFilter","ContactsPage"],"sourceRoot":""}